# -*- coding: utf-8 -*-
"""Lesson 20- Python Certificate Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jfUYrjnRYId0FNG5szOyMFrK7mDLljK6

# Cert Generator

### Goal of this project is to:

1. `Do simple Data Analysis`
    - Deal with missing values
    - Format the date or text

2. `Enchance Python Concepts`
3. `Explore more 3rd party libraries - reportlab`

---

---
##1. Download & Importing packages for this project
---
"""

#Step 1 : Define what library needed to execute your project
#Step 2 : Import all the required library
#Step 3 : Import all data
#Step 4 : Preprocess your data
#Step 5 : Create the main logic
#Step 6 : Input your data into the logic
#Step 7 : Review your output

# install external package "reportlab" because it is not in normal python
# "reportlab" is a library to link pdf to python program

# "pip" is a python package downloader (package manager)
#  pip package manager is like ur Appstore to download apps
!pip install reportlab

import numpy as np
import pandas as pd

from reportlab.lib.pagesizes import landscape, A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

"""#Step 3 : Import all data

##Reading and Exploring the Excel File
"""

df = pd.read_excel('/content/drive/MyDrive/Python Certificate /dataset.xlsx')

#Note : Check your data before and after

df

# realise that 2 of the rows are empty (half-empty will NaN, - , NaT)
# NaT - Not a Time
# NaN - Not a Number

# basically empty values (null values)

df.info()#Summary of your dataset

#non-null (not empty) --> 11 non-null --> none of the 11 rows are empty (there is data)

"""#Step 4 : Preprocess your data

---
## Data Cleaning (Data analysis)

`Data cleaning` - Formatting the data before doing the certificate generator logic

- Deal with missing values
- Format the date or text

---
"""

# the 3 problems with the original dataset (raw excel file)

# 1. Inconsistency formatting in "Course" & "CourseLevel" columns - (some are capitalized but some are uppercase)
# 2. Date format (yyyy/mm/dd) --> we want to change into (dd/mm/yyyy)
# 3. Empty rows (half empty row 4 & 8)

# we are going to solve these problems using Data analysis with Pandas!

#drop all missing values

df = df.dropna()

#Note : Check your data before and after

df

df.info()

#Date format (yyyy/mm/dd) --> we want to change into (dd/mm/yyyy)

df['Date']

# iloc --> index location
df['Date'].iloc[0]
# .iloc[0] --> index location of 0 (the first row)
# Timestamp is a data type to represent time in (excel, df)
# For example, we need to change  Timestamp('2023-09-10 00:00:00') --> "10/09/2023"

# create a new column called "Formatted Date", and create a new date format based off of "Date" column
# then remove "Date" column

df['FormattedDate'] = df['Date'].dt.strftime("%d/%m/%Y")

# in order to format dates, u can access "dt" in Pandas
# dt --> datetime (u will access to a lot of commands on dealing with dates inside the column)
# one of the commands in "dt" is --> strftime
# strftime (string formatted time) --> convert timestamp object into string representations (following a specified format)

# Y --> 2023
# y --> 23

df["FormattedDate"].dtype

# O --> Object --> string

df.info()

df.head()

# remove the "Date" column (because it is useless to us)
df = df.drop("Date",axis = 1)

# axis 0 = row
# axis 1 = column
# we are dropping the "Date" column

df

#Inconsistency formatting in "Course" & "CourseLevel" columns - (some are capitalized but some are uppercase)
x = "hello"

x.upper()

x.capitalize()

# in order to format string, u can access "str" in Pandas

df["Course"] = df['Course'].str.capitalize()
df["CourseLevel"] = df["CourseLevel"].str.capitalize()

# broadcasting function --> broadcast the logic of capitalization to all the rows in the "Course" and "CourseLevel" columns

# we will learn how to format advance strings in a pandas chapter later on

df.head()

"""#Step 5 : Create the main logic

##5.1 Import the fonts
"""

fonts_path = "/content/drive/MyDrive/Python Certificate /fonts"

# Defining the path to the fonts folder (it is like storing a string inside 'fonts_path' variable)

# registering 2 fonts into this project

 # pdfmetrics is 1 of the packages we imported! (this package is used to register fonts so that we can use it with pdf files)

 # .ttf is an entension for fonts file

 # one of the commands in pdfmetrics is --> registerFont()

 ## TTFont() is another package we imported!

 # TTFont() will need 2 inputs
# 1st input --> what font are u registering?
# 2nd input --> where is the file of the font (concat the "fonts folder" with the file )


pdfmetrics.registerFont(TTFont('Lora-Bold', fonts_path + "/Lora-Bold.ttf" ))
pdfmetrics.registerFont(TTFont('Lora-Regular', fonts_path + "/Lora-Regular.ttf" ))

"""##5.2 Create the main logic"""

from re import template
# in this function, the logic of creating a cert generator will be inside!
# this function will receive 4 inputs (name,courseName,courseLevel,date)

# we are going to REUSE THIS FUNCTION 11 times (since there are 11 students) - using a for loop to loop through the dataset
# for each student, this function will receive their name, course, level & date (4 inputs)

def certificate_generator(name,courseName,courseLevel,date):

  # store the generated file name inside a variable "pdf_file_name"
  # For example, when using this function (to create Christy Cunningham's cert) --> ChristyCunningham-python-beginner.pdf
  pdf_file_name = "/content/drive/MyDrive/Python Certificate /Certificate /"+ name + "-" + courseName + "-" + courseLevel + ".pdf"


  # canvas = blank screen (A4 landscape size)
  # we are storing this canvas inside this .pdf (file path --> "pdf_file_name")

  # creating a canvas object from reportLab import and inserting our certificate template FOLDER path into it
  # pagesize = landscape(A4) --> making it an A4 paper landscape canvas

  # Canvas() will need 2 inputs
  # 1st input - where are you storing it?  and the file name
  # 2nd input - what size?

  # storing it inside a variable called 'c'
  # basically we have a blank landscape A4 virtual paper in our .pdf file

  c = canvas.Canvas(pdf_file_name,pagesize=landscape(A4))

  # the canvas' dragImage() needs 5 inputs

  # 1st input --> image --> what are u drawing on the empty canvas?? --> certifcate template
  # X-axis (Coordinate where you are going to start pasting from -> 0 Axis )
  # Y-axis (Coordinate where you are going to start pasting from -> 0 Axis)
  # 4th input --> width --> A4[1] (using the A4 variable we imported)
  # 5th input --> height --> A4[0] (using the A4 variable we imported)

  template = "/content/drive/MyDrive/Python Certificate /certificate_template.jpg"

  c.drawImage(template,0,0,A4[1],A4[0])# BASICALLY drawing our cert template into our canvas

  center_x = c._pagesize[0]/2#Get the width based on the X-Axis
  center_y = c._pagesize[1]/2#Get the height based on the Y-Axis

  # .setFont() --> needs 2 inputs
  # 1st input --> font type
  # 2nd input --> font size (in px)

  #-------------------------------------------

  # .drawCentredString() --> needs 3 inputs
  # 1st input --> x axis on the canvas to draw
  # 2nd input --> y axis on the canvas to draw
  # 3rd input --> what you want to draw on the canvas

  #1.Name
  c.setFont('Lora-Bold',30)
  c.drawCentredString(center_x,center_y-46,name)

  # 2. CourseName & CourseLevel
  c.setFont('Lora-Bold',28)
  c.drawCentredString(center_x,center_y-105,courseName + "-" + courseLevel)

  # 3. Date
  c.setFont('Lora-Bold',17)
  c.drawCentredString(center_x+190,center_y-165,date)

  # 4. Cert ID (Check cell below before coding this)
  cert_id = "Cert ID:" + str(pd.Timestamp.now().timestamp()).replace(".","")# Generating a UNIQUE id based on current time (timestamp)
  c.setFont('Lora-Regular',12)
  c.drawCentredString(center_x + 266,center_y -230,cert_id.upper())
  # up till this point, we basically have an empty A4 landscape canvas --> drew it with the cert template.
  c.save()

certificate_generator("Alvin","Python","Advance","2/10/2024")

"""#Create unique id for your certificate"""

# For CERT ID, it has to be unique, we can uniquely generate an ID based on current time (using pd.Timestamp)
print(pd.Timestamp.now())
print(pd.Timestamp.now().timestamp()) # Unix timestamp (number of seconds since January 1 1970)
print(str(pd.Timestamp.now().timestamp()).replace(".",""))

df

for x in range(10):
  print(pd.Timestamp.now())

# there are 11 students, the idea is USING THE FUNCTION 11 TIMES (with different 4 inputs --> (name,courseName,courseLevel,date))
# use a for loop --> loop 11 times --> use function 11 times based on different 4 inputs

x = ['Alvin','Joshua','Satesh']

for name in x:
  print(name)

# enumerate() keeps track of the index of each item

for index ,name in enumerate(x):
  print(str(index) + " " + name)

for x in df:
  print(x)

# df.iterrows gives u a loopable (array-like)
# df.iterrows gives you 2 items (index, item(row))

for index,row in df.iterrows():
  print(index)

for index,x in df.iterrows():
  print(x)
  print("-"*50)

x["Name"]

x["Course"]

x["CourseLevel"]

x["FormattedDate"]

for index,x in df.iterrows():
  certificate_generator(x["Name"],x["Course"],x["CourseLevel"],x["FormattedDate"])

print(f'A total of {len(df)} certificates generated successfully')

import reportlab.pdfgen.canvas
help(reportlab.pdfgen.canvas.Canvas)